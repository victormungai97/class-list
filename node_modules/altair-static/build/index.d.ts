export interface RenderOptions {
    /**
     * URL to be used as a base for relative URLs
     */
    baseURL?: string;
    /**
     * URL to set as the server endpoint
     */
    endpointURL?: string;
    /**
     * URL to set as the subscription endpoint
     */
    subscriptionsEndpoint?: string;
    /**
     * Initial query to be added
     */
    initialQuery?: string;
    /**
     * Initial variables to be added
     */
    initialVariables?: string;
    /**
     * Initial pre-request script to be added
     */
    initialPreRequestScript?: string;
    /**
     * Initial headers object to be added
     * @example
     * {
     *  'X-GraphQL-Token': 'asd7-237s-2bdk-nsdk4'
     * }
     */
    initialHeaders?: Object;
    /**
     * Whether to render the initial options in a seperate javascript file or not.
     * Use this to be able to enforce strict CSP rules.
     * @default false
     */
    serveInitialOptionsInSeperateRequest?: boolean;
    /**
     * Namespace for storing the data for the altair instance.
     * Use this when you have multiple altair instances running on the same domain.
     * @example
     * instanceStorageNamespace: 'altair_dev_'
     */
    instanceStorageNamespace?: string;
}
/**
 * Render Altair Initial options as a string using the provided renderOptions
 * @param renderOptions
 */
export declare const renderInitialOptions: ({ endpointURL, subscriptionsEndpoint, initialQuery, initialVariables, initialHeaders, initialPreRequestScript, instanceStorageNamespace }?: RenderOptions) => string;
/**
 * Render Altair as a string using the provided renderOptions
 * @param renderOptions
 */
export declare const renderAltair: (options?: RenderOptions) => string;
/**
 * Returns the path to Altair assets, for resolving the assets when rendering Altair
 */
export declare const getDistDirectory: () => string;
export default renderAltair;
